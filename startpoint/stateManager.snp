Started = 1
__doc__ = ' Eventhandler class represents the simulator which interprets the model. '
__module__ = 'EventHandler'
aftersnp = []
beforesnp = []
components = {}
connections = {}
description = ''
empty_event_signal = None
encapsulated_components = {}
enter = {}
exit = {}
final = []
finished = 0
haddition = []
has_interactor = 0
history = {}
imports = {}
influencees = {}
init = ['import threading\nfrom Tkinter import *\nfrom DWatchGUI import DWatchGUI\nfrom LowLevelGUI import LowLevelGUI\nroot = Tk()\nroot.title("My watch")\ndWatchGUI = DWatchGUI(root, eventhandler)\neventhandler.start()\nt_end = time.time() + 3\nwhile time.time() < t_end:\n    print \'Hello World!\'\n    time.sleep(1)\nroot.mainloop()']
interactor = ['setup_gui_debugger(eventhandler, debugger)\n']
internal_num = 0
internal_prefix = 0
local_restored = 0
macro = {'[DUMP]': [[['[msg]', '']], 'dump_message([msg])'], '[SNAPSHOTRET]': [[['[time]', '']], 'eventhandler.retrieve_snapshot([time])'], '[PARAMS]': [[], 'eventhandler.get_event_params()'], '[SENDER]': [[], 'eventhandler.get_event_sender()'], '[EVENT]': [[['[ev]', ''], ['[p]', '[]'], ['[lock]', 'None']], 'eventhandler.event([ev], [p], 1, [lock])'], '[CURRENTSTATE]': [[], 'eventhandler.get_current_state()'], '[EXTEVENT]': [[['[ev]', ''], ['[p]', ''], ['[rec]', '']], 'eventhandler.external_event([ev], [p], [rec])'], '[INSTATE]': [[['[state]', ''], ['[check_substate]', '1']], 'eventhandler.is_in_state([state], [check_substate])'], '[DESCRIPTION]': [[], 'eventhandler.description'], '[SYNCALL]': [[['[event]', ''], ['[params]', ''], ['[listento]', '']], 'eventhandler.synchronous_call([event], [params], [listento])'], '[SNAPSHOTREQ]': [[['[time]', '']], 'eventhandler.request_snapshot([time])']}
model_name = 'stateManager.des'
modeltext = None
newttrans = {}
options = {'Timewarp': '0', 'ModelName': 'stateManager', 'InnerTransitionFirst': '0', 'TimeVariable': None, 'TimewarpPort': None, 'TopLevel': '0', 'Harel': '1', 'MessageTime': 'None'}
outgoing_table = {}
param = {}
ports = {}
required_components = {}
required_connections = []
restore = []
restored = 0
snapshot_objects = []
snapshot_requests = []
snapshot_retrieve = None
state = ['TimeEditingMode']
stateH = {'DisplayAlarmMode': {'[EC]': {}, '[IM]': None, '[ITF]': 0, '[RTO]': 0, '[HS]': 0, '[CS]': 0, '[FS]': 0, '[OTF]': 0, '[DS]': 0, '[HS*]': 0, '[PA]': {}}, 'LightOn': {'[EC]': {}, '[IM]': None, '[ITF]': 0, '[RTO]': 0, '[HS]': 0, '[CS]': 0, '[FS]': 0, '[OTF]': 0, '[DS]': 0, '[HS*]': 0, '[PA]': {}}, 'ChronoMode': {'[EC]': {}, '[IM]': None, '[ITF]': 0, '[RTO]': 0, '[HS]': 0, '[CS]': 0, '[FS]': 0, '[OTF]': 0, '[DS]': 0, '[HS*]': 0, '[PA]': {}}, 'NormalTimeDisplay': {'[EC]': {}, '[IM]': None, '[ITF]': 0, '[RTO]': 0, '[HS]': 0, '[CS]': 0, '[FS]': 0, '[OTF]': 0, '[DS]': 1, '[HS*]': 0, '[PA]': {}}, 'ChronoIncreasing': {'[EC]': {}, '[IM]': None, '[ITF]': 0, '[RTO]': 0, '[HS]': 0, '[CS]': 0, '[FS]': 0, '[OTF]': 0, '[DS]': 0, '[HS*]': 0, '[PA]': {}}, 'TimeEditingMode': {'[EC]': {}, '[IM]': None, '[ITF]': 0, '[RTO]': 0, '[HS]': 0, '[CS]': 0, '[FS]': 0, '[OTF]': 0, '[DS]': 0, '[HS*]': 0, '[PA]': {}}}
taddition = []
top_level = 1
trans = {'changeMode': [{'[HS]': 0, 'S': 'NormalTimeDisplay', '[TP]': 0, 'O': ['print "NormalTimeDisplay -> ChronoMode"', 'dWatchGUI.refreshChronoDisplay()'], 'N': 'ChronoMode'}, {'[HS]': 0, 'S': 'ChronoMode', '[TP]': 0, 'O': ['print "ChronoMode -> NormalTimeDisplay"', 'dWatchGUI.refreshTimeDisplay()'], 'N': 'NormalTimeDisplay'}], 'setAlarm': [{'[HS]': 0, 'S': 'NormalTimeDisplay', '[TP]': 0, 'O': ['print "NormalTimeDisplay -> DisplayAlarmMode"', 'dWatchGUI.refreshAlarmDisplay()'], 'N': 'DisplayAlarmMode'}], 'lightOn': [{'[HS]': 0, 'S': 'NormalTimeDisplay', '[TP]': 0, 'O': ['print "NormalTimeDisplay -> LightOn"', 'dWatchGUI.setIndiglo()'], 'N': 'LightOn'}], 'finishEdit': [{'[HS]': 0, 'S': 'ChronoIncreasing', '[TP]': 0, 'O': ['print "ChronoIncreasing -> ChronoMode"', 'dWatchGUI.refreshChronoDisplay()'], 'N': 'ChronoMode'}], 'onoff': [{'[HS]': 0, 'S': 'DisplayAlarmMode', '[TP]': 0, 'O': ['print "DisplayAlarm -> NormalTimeDisplay"', 'dWatchGUI.refreshTimeDisplay()'], 'N': 'NormalTimeDisplay'}], 'lightOff': [{'[HS]': 0, 'S': 'LightOn', '[TP]': 0, 'O': ['print "NormalTimeDisplay -> LightOn"', 'time.sleep(2)', 'dWatchGUI.unsetIndiglo()'], 'N': 'NormalTimeDisplay'}], 'editTime': [{'[HS]': 0, 'S': 'ChronoMode', '[TP]': 0, 'O': ['print "ChronoMode -> ChronoIncreasing"', 'dWatchGUI.displayIncreaseChronoByOne()'], 'N': 'ChronoIncreasing'}, {'[HS]': 0, 'S': 'NormalTimeDisplay', '[TP]': 0, 'O': ['print "NormalTimeDisplay -> TimeEditingMode"', 'time.sleep(1.5)'], 'N': 'TimeEditingMode'}]}
use_gui = 1
work_path = 'svmwork'
global_snapshot_objects = {}
clock_threads = []
